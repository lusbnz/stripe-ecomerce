import Stripe from "stripe";
import { stripe } from "@/lib/stripe";
import { NextResponse } from "next/server";
import { headers } from "next/headers";
import nodemailer from "nodemailer";

// Stripe webhook secret t·ª´ .env
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;

export async function POST(request: Request) {
  const body = await request.text();
  const allHeaders = await headers();
  const signature = allHeaders.get("Stripe-Signature") as string;

  let event: Stripe.Event;

  try {
    event = stripe.webhooks.constructEvent(body, signature, webhookSecret);
  } catch (err) {
    console.error("‚ùå Invalid signature", err);
    return new NextResponse("Invalid signature", { status: 400 });
  }

  // X·ª≠ l√Ω event khi thanh to√°n ho√†n t·∫•t
  if (event.type === "checkout.session.completed") {
    const session = event.data.object as Stripe.Checkout.Session;

    const email = session.customer_details?.email;
    const amount = session.amount_total ? session.amount_total / 100 : 0;

    console.log("‚úÖ Thanh to√°n ho√†n t·∫•t b·ªüi:", email);

    if (email) {
      await sendMail(
        email,
        "C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!",
        `B·∫°n ƒë√£ thanh to√°n ${amount.toLocaleString()} VND. C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu!`
      );
    }
  }

  return new NextResponse("Webhook received", { status: 200 });
}

// ‚úÖ H√†m g·ª≠i email b·∫±ng Nodemailer
async function sendMail(to: string, subject: string, text: string) {
  const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: process.env.EMAIL_USER,   // Gmail c·ªßa b·∫°n
      pass: process.env.EMAIL_PASS,   // M·∫≠t kh·∫©u ·ª©ng d·ª•ng (App Password)
    },
  });

  await transporter.sendMail({
    from: `"Shop C·ªßa B·∫°n" <${process.env.EMAIL_USER}>`,
    to,
    subject,
    text,
  });

  console.log(`üìß ƒê√£ g·ª≠i email x√°c nh·∫≠n ƒë·∫øn ${to}`);
}
